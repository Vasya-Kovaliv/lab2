class BigNumber:
    def __init__(self):
        self.number = []

    def set_number_from_hex(self, hex_string):
        self.number = []
        hex_string = hex_string.strip()
        hex_string = hex_string.replace("0x", "")
        if len(hex_string) % 2 != 0:
            hex_string = "0" + hex_string

        for i in range(0, len(hex_string), 2):
            byte = hex_string[i:i + 2]
            self.number.append(int(byte, 16))

    def get_number_as_hex(self):
        hex_string = ""
        for byte in self.number:
            hex_string += format(byte, "02x")
        return hex_string

    def inv(self):
        result = []
        for byte in self.number:
            result.append(byte ^ 0xFF)
        self.number = result

    def xor(self, other):
        result = []
        min_len = min(len(self.number), len(other.number))
        for i in range(min_len):
            result.append(self.number[i] ^ other.number[i])
        self.number = result

    def or_(self, other):
        result = []
        max_len = max(len(self.number), len(other.number))
        for i in range(max_len):
            if i < len(self.number) and i < len(other.number):
                result.append(self.number[i] | other.number[i])
            elif i < len(self.number):
                result.append(self.number[i])
            else:
                result.append(other.number[i])
        self.number = result

    def and_(self, other):
        result = []
        max_len = max(len(self.number), len(other.number))
        for i in range(max_len):
            if i < len(self.number) and i < len(other.number):
                result.append(self.number[i] & other.number[i])
            else:
                result.append(0)
        self.number = result

    def shift_r(self, n):
        num_bytes = n // 8
        num_bits = n % 8
        result = self.number[num_bytes:]  # Зсуваємо байти
        if num_bits > 0:
            carry = 0
            for i in range(len(result)):
                temp = result[i]
                result[i] = (temp >> num_bits) | carry
                carry = (temp & ((1 << num_bits) - 1)) << (8 - num_bits)
        self.number = result

    def shift_l(self, n):
        num_bytes = n // 8
        num_bits = n % 8
        result = [0] * num_bytes + self.number  # Зсуваємо байти
        if num_bits > 0:
            carry = 0
            for i in reversed(range(len(result))):
                temp = result[i]
                result[i] = ((temp << num_bits) & 0xFF) | carry
                carry = (temp & (0xFF >> (8 - num_bits))) >> (8 - num_bits)
        self.number = result


# Приклад використання
numberA = BigNumber()
numberB = BigNumber()
numberC = BigNumber()

numberA.set_number_from_hex("e035c6cfa42609b998b883bc1699df885cef74e2b2cc372eb8fa7e7")
numberB.set_number_from_hex("5072f028943e0fd5fab3273782de14b1011741bd0c5cd6ba6474330")

numberC.set_number_from_hex(numberA.get_number_as_hex()) 
numberC.xor(numberB)
print(numberC.get_number_as_hex())  

numberC.set_number_from_hex(numberA.get_number_as_hex())  
numberC.or_(numberB)
print(numberC.get_number_as_hex())  

numberC.set_number_from_hex(numberA.get_number_as_hex())  
numberC.and_(numberB)
print(numberC.get_number_as_hex())  

numberC.set_number_from_hex(numberA.get_number_as_hex())  
numberC.shift_r(32)
print(numberC.get_number_as_hex())  

numberC.set_number_from_hex(numberA.get_number_as_hex())
numberC.shift_l(16)
print(numberC.get_number_as_hex())
